/* @import url("https://cdn.skypack.dev/splitting/dist/splitting.css"); */
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap");
/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */

.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);

  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);

  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));

  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));

  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));

  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );

  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));

  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}


:root {
  --interval: 0.95s;
  --duration: calc(var(--interval) * 4);
}

*,
*:before,
*:after {
  box-sizing: border-box;
  position: relative;
}

html,
body {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  background: #131c28;
  color: white;
  font-family: "Poppins", sans-serif;
  overflow: hidden;
}


@-webkit-keyframes color {
  from, to {
    --color: #2358e6;
  }
  25% {
    --color: #e58d2c;
  }
  50% {
    --color: #27c05f;
  }
  75% {
    --color: #df4b20;
  }
}
@keyframes color {
  from, to {
    --color: #2358e6;
  }
  25% {
    --color: #e58d2c;
  }
  50% {
    --color: #27c05f;
  }
  75% {
    --color: #df4b20;
  }
}

.phrase {
  font-size: 10vmin;
  text-align: center;
  position: absolute;
  bottom: 50%;
  left: 0;
  right: 0;
  display: grid;
  grid-template-areas: "layer";
  opacity: 0;
}
.phrase.splitting {
  opacity: 1;
}
.phrase .word {
  --delay: calc(var(--interval) * (var(--item-index)));
  display: block;
  grid-area: layer;
  --transform: translateX(0);
}
.phrase .word.splitting {
  -webkit-animation: word-reveal var(--duration) linear both infinite, word-bounce var(--duration) ease both infinite;
          animation: word-reveal var(--duration) linear both infinite, word-bounce var(--duration) ease both infinite;
  -webkit-animation-delay: var(--delay);
          animation-delay: var(--delay);
}
@-webkit-keyframes word-reveal {
  0%, 25%, 100% {
    visibility: hidden;
  }
  1%, 24% {
    visibility: visible;
  }
}
@keyframes word-reveal {
  0%, 25%, 100% {
    visibility: hidden;
  }
  1%, 24% {
    visibility: visible;
  }
}
@-webkit-keyframes word-bounce {
  from, 30%, to {
    transform: var(--transform);
  }
  12.5% {
    transform: translateY(30%) var(--transform);
  }
}
@keyframes word-bounce {
  from, 30%, to {
    transform: var(--transform);
  }
  12.5% {
    transform: translateY(30%) var(--transform);
  }
}
.phrase .word.slide .char {
  -webkit-animation: char-reveal var(--interval) cubic-bezier(0, 0, 0.2, 1) both infinite;
          animation: char-reveal var(--interval) cubic-bezier(0, 0, 0.2, 1) both infinite;
  -webkit-animation-delay: var(--delay);
          animation-delay: var(--delay);
}
@-webkit-keyframes char-reveal {
  0% {
    transform: translateX(calc(-0.5em * var(--distance-sine)));
  }
  100% {
    transform: translateX(calc(0.25em * var(--distance-sine))) translateY(50%);
  }
}
@keyframes char-reveal {
  0% {
    transform: translateX(calc(-0.5em * var(--distance-sine)));
  }
  100% {
    transform: translateX(calc(0.25em * var(--distance-sine))) translateY(50%);
  }
}
.phrase .word.smiley {
  --transform: rotate(90deg);
}
.phrase .word.smiley [data-char] {
  -webkit-animation: none var(--interval) ease-in-out infinite;
          animation: none var(--interval) ease-in-out infinite;
  -webkit-animation-delay: var(--delay);
          animation-delay: var(--delay);
}
.phrase .word.smiley [data-char=":"] {
  top: -0.06em;
  -webkit-animation-name: blink;
          animation-name: blink;
}
@-webkit-keyframes blink {
  0%, 60% {
    transform: scaleX(1);
  }
  30% {
    transform: scaleX(0);
  }
}
@keyframes blink {
  0%, 60% {
    transform: scaleX(1);
  }
  30% {
    transform: scaleX(0);
  }
}
.phrase .word.smiley [data-char=")"] {
  -webkit-animation-name: smile;
          animation-name: smile;
  -webkit-animation-timing-function: ease-out;
          animation-timing-function: ease-out;
}
@-webkit-keyframes smile {
  0% {
    transform: scale(0.7);
  }
  60% {
    transform: scale(1);
  }
}
@keyframes smile {
  0% {
    transform: scale(0.7);
  }
  60% {
    transform: scale(1);
  }
}